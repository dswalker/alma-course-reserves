<?php

ini_set('display_errors', '1');

chdir(__DIR__);

require_once 'vendor/autoload.php';

use Reserves\CourseFormatter;
use Reserves\CourseList;
use Silex\Provider\TwigServiceProvider;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

// set-up app

$app = new Silex\Application();
$app['debug'] = true;

// set-up twig

$app->register(new TwigServiceProvider(), array(
    'twig.path' => array("campuses/$campus/views", __DIR__ . '/views'),
));

// custom twig filters (=functions)

$app['twig'] = $app->extend("twig", function (\Twig_Environment $twig, Silex\Application $app) use ($campus) {
    $twig->addExtension(new CourseFormatter($campus));
    return $twig;
});

// course listing

$app->get('/', function(Request $request) use ($app, $campus) {
    
    // get cached course list (generated by bin/courses.php)
    $data_file = "data/$campus.data";
    $contents = file_get_contents($data_file);
    
    // render it
    return $app['twig']->render('index.html.twig', array(
        'courses' => unserialize($contents),
        'campus' => $campus,
        'last_updated' => date('m-d-Y g:i a', filemtime($data_file))
    ));
});

// individual course page

$app->get('/course/{course_id}', function(Request $request, $course_id) use ($app, $campus) {
    
    // get the course
    $list = new CourseList($campus);
    $course = $list->getCourses()->getCourse($course_id);
    
    // debugging
    if ($request->get('debug', null) != null) {
        return response(print_r($course, true), 'text/plain');
    }
        
    // render it
    return $app['twig']->render('course.html.twig', array(
        'course' => $course,
        'campus' => $campus,
        'course_id' => $course_id
    ));
});

// holdings and status

$app->get('/course/{course_id}/{mms_id}', function($course_id, $mms_id) use ($app, $campus) {

    $list = new CourseList($campus);
    $items = $list->getItems($mms_id);
    
    return response(json_encode($items), 'application/json');
});
    
$app->run();


// format non-html response

function response($content, $content_type)
{
    $response = new Response();
    $response->headers->set('Content-Type', $content_type);
    $response->setContent($content);
    return $response;
}
